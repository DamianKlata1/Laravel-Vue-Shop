<?php

namespace Tests\Feature\UserDashboard;

use App\Models\Order;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserDashboardTest extends TestCase
{
    use RefreshDatabase;
    private User $user;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }
    public function test_guest_cannot_see_dashboard(): void
    {
        $response = $this->get('/dashboard');

        $response->assertStatus(302);
        $response->assertRedirect('/login');
    }

    public function test_user_can_see_dashboard(): void
    {
        $response = $this->actingAs($this->user)->get('/dashboard');
        $response->assertStatus(200);
    }

    public function test_user_can_see_his_orders_sorted_by_latest(): void
    {
        $orders = Order::factory()->count(3)->create(['created_by' => $this->user->id]);

        $response = $this->actingAs($this->user)->get('/dashboard');
        $response->assertStatus(200);
        $response->assertInertia(fn($assert) => $assert
            ->component('User/Dashboard')
            ->has('orders', fn($assert) => $assert
                ->where('0.id', $orders[2]->id)
                ->where('1.id', $orders[1]->id)
                ->where('2.id', $orders[0]->id)
            ));
    }
    public function test_user_cannot_see_other_users_orders(): void
    {
        $otherUser = User::factory()->create();
        $orders = Order::factory()->count(3)->create(['created_by' => $otherUser->id]);


        $response = $this->actingAs($this->user)->get('/dashboard');

        $response->assertStatus(200);
        $response->assertInertia(fn($assert) => $assert
            ->component('User/Dashboard')
            ->has('orders', fn($assert) => $assert
                ->missing('0.id')
                ->missing('1.id')
                ->missing('2.id')
            ));
    }


}
