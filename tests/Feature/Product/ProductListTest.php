<?php

namespace Tests\Feature\Product;

use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductListTest extends TestCase
{
    use RefreshDatabase;
    private User $user;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }
    public function test_user_can_see_product_list()
    {
        $response = $this->actingAs($this->user)->get('/products');

        $response->assertStatus(200);
        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->has('products')
                ->has('categories')
                ->has('brands')
                ->has('search')
                ->has('brandProductCounts')
                ->has('categoryProductCounts')
        );
    }
    public function test_product_list_is_paginated()
    {
        $products = Product::factory()->count(20)->create();

        $response = $this->get('/products');

        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->has('products.data', 10)
        );
    }
    public function test_user_can_search_products()
    {
        $products = Product::factory()->count(20)->create();
        $search = $products->random()->title;

        $response = $this->get('/products?search=' . $search);

        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->where('products.data.0.title', $search)
        );
    }
    public function test_user_can_filter_products_by_category()
    {
        $products = Product::factory()->count(20)->create();
        $category = $products->random()->category;

        $response = $this->get('/products?categories[]=' . $category->id);

        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->where('products.data.0.category.id', $category->id)
        );
    }
    public function test_user_can_filter_products_by_brand()
    {
        $products = Product::factory()->count(20)->create();
        $brand = $products->random()->brand;

        $response = $this->get('/products?brands[]=' . $brand->id);

        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->where('products.data.0.brand.id', $brand->id)
        );
    }
    public function test_user_can_filter_products_by_category_and_brand()
    {
        $products = Product::factory()->count(20)->create();
        $randomProduct = $products->random();
        $category = $randomProduct->category;
        $brand = $randomProduct->brand;
        $response = $this->get('/products?brands[]='.$brand->id.'&categories[]='.$category->id);
        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->where('products.data.0.brand.id', $brand->id)
                ->where('products.data.0.category.id', $category->id)
        );
    }
    public function test_user_can_filter_products_by_price()
    {
        $products = Product::factory()->count(20)->create();
        $randomProduct = $products->random();
        $price = $randomProduct->price;

        $response = $this->get('/products?prices[from]='.$price.'&prices[to]='.$price);
        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->where('products.data.0.price', $price)
        );
    }
    public function test_products_wishlisted_count_are_calculated_correctly()
    {
        $products = Product::factory()->count(20)->create();
        $wishlistItems = $products->first()->wishlistItems()->create(['user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)->get('/products');

        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductList')
                ->where('products.data.0.wishlisted_count', 1)
        );
    }

}
