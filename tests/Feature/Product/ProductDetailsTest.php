<?php

namespace Tests\Feature\Product;

use App\Models\Product;
use App\Models\Review;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductDetailsTest extends TestCase
{
    use RefreshDatabase;
    private User $user;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function test_user_can_see_product_details()
    {
        $product = Product::factory()->create();

        $response = $this->get('/products/' . $product->id);

        $response->assertStatus(200);
        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductDetails')
                ->has('product')
                ->has('reviews')
        );
    }
    public function test_product_average_rating_is_calculated_correctly()
    {
        $product = Product::factory()->create();
        $review1 = Review::factory()->create([
            'product_id' => $product->id,
            'rating' => 3,
        ]);
        $review2 = Review::factory()->create([
            'product_id' => $product->id,
            'rating' => 5,
        ]);

        $response = $this->get('/products/' . $product->id);

        $response->assertStatus(200);
        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductDetails')
                ->has('product')
                ->has('reviews')
                ->where('product.data.rating', 4)
        );
    }
    public function test_product_wishlisted_count_is_calculated_correctly()
    {
        $product = Product::factory()->create();
        $this->user->wishlist_items()->create([
            'product_id' => $product->id,
        ]);

        $response = $this->get('/products/' . $product->id);

        $response->assertStatus(200);
        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductDetails')
                ->has('product')
                ->has('reviews')
                ->where('product.data.wishlisted_count', 1)
        );
    }
    public function test_product_price_is_correct()
    {
        $product = Product::factory()->create([
            'price' => 1000,
        ]);

        $response = $this->get('/products/' . $product->id);

        $response->assertStatus(200);
        $response->assertInertia(fn ($assert) =>
            $assert
                ->component('User/ProductDetails')
                ->has('product')
                ->has('reviews')
                ->where('product.data.price', 1000)
        );
    }

}
