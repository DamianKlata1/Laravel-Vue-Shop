<?php

namespace Tests\Feature\Wishlist;

use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class WishlistTest extends TestCase
{
    use RefreshDatabase;
    private User $user;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }
    public function test_user_can_see_wishlist()
    {
        $wishlistItem = $this->user->wishlist_items()->create(['product_id' => Product::factory()->create()->id]);

        $response = $this->actingAs($this->user)
            ->get('/wishlist/view');

        $response->assertStatus(200);
        $response->assertInertia(fn($assert) => $assert
            ->component('User/Wishlist')
            ->has('wishlistItems',1)
        );
    }
    public function test_guest_cannot_see_wishlist()
    {
        $response = $this->get('/wishlist/view');

        $response->assertStatus(302);
        $response->assertRedirect('/login');
    }
    public function test_user_can_add_product_to_wishlist()
    {
        $product = Product::factory()->create();

        $response = $this->actingAs($this->user)
            ->post('/wishlist/store/'. $product->id);

        $response->assertStatus(302);
        $this->assertDatabaseHas('wishlist_items', [
            'product_id' => $product->id,
            'user_id' => $this->user->id
        ]);
    }
    public function test_user_cannot_add_same_product_to_wishlist()
    {
        $product = Product::factory()->create();
        $this->user->wishlist_items()->create(['product_id' => $product->id]);

        $response = $this->actingAs($this->user)
            ->post('/wishlist/store/'. $product->id);

        $response->assertStatus(302);
        $response->assertSessionHas('info');
    }
    public function test_guest_cannot_add_product_to_wishlist()
    {
        $product = Product::factory()->create();

        $response = $this->post('/wishlist/store/'. $product->id);

        $response->assertStatus(302);
        $response->assertRedirect('/login');
    }
    public function test_user_can_remove_product_from_wishlist()
    {
        $wishlistItem = $this->user->wishlist_items()->create(['product_id' => Product::factory()->create()->id]);

        $response = $this->actingAs($this->user)
            ->delete('/wishlist/delete/'. $wishlistItem->id);

        $response->assertStatus(302);
        $this->assertDatabaseMissing('wishlist_items', [
            'id' => $wishlistItem->id
        ]);
    }
    public function test_guest_cannot_remove_product_from_wishlist()
    {
        $wishlistItem = $this->user->wishlist_items()->create(['product_id' => Product::factory()->create()->id]);

        $response = $this->delete('/wishlist/delete/'. $wishlistItem->id);

        $response->assertStatus(302);
        $response->assertRedirect('/login');
    }
    public function test_user_cannot_remove_not_his_own_product_from_wishlist()
    {
        $otherUser = User::factory()->create();
        $wishlistItem = $otherUser->wishlist_items()->create(['product_id' => Product::factory()->create()->id]);

        $response = $this->actingAs($this->user)
            ->delete('/wishlist/delete/'. $wishlistItem->id);

        $response->assertSessionHas('error');
        $this->assertDatabaseHas('wishlist_items', [
            'id' => $wishlistItem->id
        ]);
    }
    public function test_user_cannot_see_other_user_wishlist()
    {
        $otherUser = User::factory()->create();
        $wishlistItem = $otherUser->wishlist_items()->create(['product_id' => Product::factory()->create()->id]);

        $response = $this->actingAs($this->user)
            ->get('/wishlist/view');

        $response->assertStatus(200);
        $response->assertInertia(fn($assert) => $assert
            ->component('User/Wishlist')
            ->has('wishlistItems')
            ->where('wishlistItems', [])
        );
    }
}
