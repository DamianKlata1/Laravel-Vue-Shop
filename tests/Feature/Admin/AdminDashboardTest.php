<?php

namespace Tests\Feature\Admin;

use App\Models\Order;
use App\Models\User;
use App\Models\Visitor;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Inertia\Testing\AssertableInertia as Assert;
use Tests\TestCase;

class AdminDashboardTest extends TestCase
{
    use RefreshDatabase;
    private User $admin;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->admin = User::factory()->create([
            'isAdmin' => 1
        ]);
    }

    public function test_dashboard_page_can_be_rendered()
    {
        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertStatus(200);
    }

    public function test_user_is_redirected_to_admin_login_page_if_not_logged_in()
    {
        $response = $this->get('/admin/dashboard');

        $response->assertRedirect('/admin/login');
    }

    public function test_orders_are_displayed_on_dashboard()
    {
        $orders = Order::factory(2)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->has('orders.data', 2));
    }

    public function test_total_income_is_calculated_correctly_on_dashboard()
    {
        $orders = Order::factory(2)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->where('totalIncome', Order::sum('price')));
    }
    public function test_transaction_amount_is_calculated_correctly_on_dashboard()
    {
        $orders = Order::factory(2)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->where('transactionAmount', Order::count()));
    }

    public function test_users_amount_is_calculated_correctly_on_dashboard()
    {
        $users = User::factory(2)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->where('usersAmount', User::count()));
    }

    public function test_unique_visitors_amount_is_calculated_correctly_on_dashboard()
    {
        $visitors = Visitor::factory(2)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->where('uniqueVisitorsAmount', Visitor::count()));
    }

    public function test_orders_are_filtered_on_dashboard()
    {
        $orders = Order::factory(10)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard?search='. $orders[0]->id);

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->has('orders.data', 1));
    }

    public function test_orders_are_paginated_on_dashboard()
    {
        $orders = Order::factory(10)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->has('orders.data', 5));
    }

    public function test_orders_are_ordered_by_latest_on_dashboard()
    {
        $orders = Order::factory(10)->create();

        $response = $this->actingAs($this->admin)->get('/admin/dashboard');

        $response->assertInertia(fn(Assert $assert) => $assert
            ->component('Admin/Dashboard')
            ->where('orders.data.0.id', $orders[9]->id));
    }

}
