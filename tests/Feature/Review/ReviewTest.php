<?php

namespace Tests\Feature\Review;

use App\Models\Product;
use App\Models\Review;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ReviewTest extends TestCase
{
    use RefreshDatabase;

    private User $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function test_reviews_are_loaded_with_product()
    {
        $product = Product::factory()->create();
        $reviews = Review::factory(5)->create(['product_id' => $product->id]);

        $response = $this->get('/products/' . $product->id);

        $response->assertStatus(200);
        $response->assertInertia(fn($assert) => $assert
            ->component('User/ProductDetails')
            ->has('reviews.data', 5)
        );
    }

    public function test_user_can_add_review()
    {
        $product = Product::factory()->create();
        $review = Review::factory()->make(['product_id' => $product->id]);

        $response = $this->actingAs($this->user)
            ->post('/products/' . $product->id . '/reviews', $review->toArray());

        $response->assertStatus(302);
        $this->assertDatabaseHas('reviews', [
            'product_id' => $product->id,
            'user_id' => $this->user->id,
            'rating' => $review->rating,
            'comment' => $review->comment
        ]);
    }

    public function test_guest_cannot_add_review()
    {
        $product = Product::factory()->create();
        $review = Review::factory()->make(['product_id' => $product->id]);

        $response = $this->post('/products/' . $product->id . '/reviews', $review->toArray());

        $response->assertRedirect('/login');
        $this->assertDatabaseMissing('reviews', [
            'product_id' => $product->id,
            'user_id' => $this->user->id,
            'rating' => $review->rating,
            'comment' => $review->comment
        ]);
    }

    public function test_user_can_toggle_review_as_helpful()
    {
        $otherUser = User::factory()->create();
        $review = Review::factory()->create(['user_id' => $otherUser->id]);

        $response = $this->actingAs($this->user)
            ->post('/reviews/' . $review->id . '/helpful-toggle');

        $this->assertDatabaseHas('review_helpfuls', [
            'user_id' => $this->user->id,
            'review_id' => $review->id
        ]);
    }

    public function test_guest_cannot_toggle_review_as_helpful()
    {
        $review = Review::factory()->create();

        $response = $this->post('/reviews/' . $review->id . '/helpful-toggle');

        $response->assertRedirect('/login');
        $this->assertDatabaseMissing('review_helpfuls', [
            'user_id' => $this->user->id,
            'review_id' => $review->id
        ]);
    }

    public function test_user_cannot_toggle_own_review_as_helpful()
    {
        $review = Review::factory()->create(['user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)
            ->post('/reviews/' . $review->id . '/helpful-toggle');

        $response->assertSessionHas('error');
        $this->assertDatabaseMissing('review_helpfuls', [
            'user_id' => $this->user->id,
            'review_id' => $review->id
        ]);
    }

    public function test_user_can_delete_own_review()
    {
        $review = Review::factory()->create(['user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)
            ->delete('/reviews/' . $review->id . '/delete');

        $response->assertStatus(302);
        $this->assertDatabaseMissing('reviews', ['id' => $review->id]);
    }

    public function test_user_cannot_delete_not_his_own_review()
    {
        $otherUser = User::factory()->create();
        $review = Review::factory()->create(['user_id' => $otherUser->id]);

        $response = $this->actingAs($this->user)
            ->delete('/reviews/' . $review->id . '/delete');

        $response->assertSessionHas('error');
        $this->assertDatabaseHas('reviews', ['id' => $review->id]);
    }

    public function test_guest_cannot_delete_review()
    {
        $review = Review::factory()->create();

        $response = $this->delete('/reviews/' . $review->id . '/delete');

        $response->assertRedirect('/login');
        $this->assertDatabaseHas('reviews', ['id' => $review->id]);
    }

    public function test_rating_is_properly_validated()
    {
        $product = Product::factory()->create();
        $review = Review::factory()->make(['rating' => 6, 'product_id' => $product->id]);

        $response = $this->actingAs($this->user)
            ->post('/products/' . $product->id . '/reviews', $review->toArray());

        $response->assertSessionHas('error');
        $this->assertDatabaseMissing('reviews', [
            'product_id' => $product->id,
            'user_id' => $this->user->id,
            'rating' => $review->rating,
            'comment' => $review->comment
        ]);
    }
    public function test_comment_is_properly_validated()
    {
        $product = Product::factory()->create();
        $review = Review::factory()->make(['comment' => '', 'product_id' => $product->id]);

        $response = $this->actingAs($this->user)
            ->post('/products/' . $product->id . '/reviews', $review->toArray());

        $response->assertSessionHas('error');
        $this->assertDatabaseMissing('reviews', [
            'product_id' => $product->id,
            'user_id' => $this->user->id,
            'rating' => $review->rating,
            'comment' => $review->comment
        ]);
    }
}
